// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: transmitter.proto

#include "transmitter.pb.h"
#include "transmitter.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace transmitter {

static const char* TransmitterManager_method_names[] = {
  "/transmitter.TransmitterManager/SendMessage",
  "/transmitter.TransmitterManager/SaveMessage",
  "/transmitter.TransmitterManager/GetUserProfile",
  "/transmitter.TransmitterManager/SetUserProfile",
  "/transmitter.TransmitterManager/UserProfilePing",
  "/transmitter.TransmitterManager/GetPingMessages",
  "/transmitter.TransmitterManager/SendDataMessage",
  "/transmitter.TransmitterManager/GetDataMessages",
};

std::unique_ptr< TransmitterManager::Stub> TransmitterManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< TransmitterManager::Stub> stub(new TransmitterManager::Stub(channel));
  return stub;
}

TransmitterManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendMessage_(TransmitterManager_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveMessage_(TransmitterManager_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserProfile_(TransmitterManager_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetUserProfile_(TransmitterManager_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserProfilePing_(TransmitterManager_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPingMessages_(TransmitterManager_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendDataMessage_(TransmitterManager_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDataMessages_(TransmitterManager_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TransmitterManager::Stub::SendMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::transmitter::TransmitterReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* TransmitterManager::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::Status TransmitterManager::Stub::SaveMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::transmitter::TransmitterReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SaveMessage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* TransmitterManager::Stub::AsyncSaveMessageRaw(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>(channel_.get(), cq, rpcmethod_SaveMessage_, context, request);
}

::grpc::Status TransmitterManager::Stub::GetUserProfile(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::TransmitterReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetUserProfile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* TransmitterManager::Stub::AsyncGetUserProfileRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>(channel_.get(), cq, rpcmethod_GetUserProfile_, context, request);
}

::grpc::Status TransmitterManager::Stub::SetUserProfile(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::TransmitterReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetUserProfile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* TransmitterManager::Stub::AsyncSetUserProfileRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>(channel_.get(), cq, rpcmethod_SetUserProfile_, context, request);
}

::grpc::Status TransmitterManager::Stub::UserProfilePing(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::TransmitterReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UserProfilePing_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* TransmitterManager::Stub::AsyncUserProfilePingRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>(channel_.get(), cq, rpcmethod_UserProfilePing_, context, request);
}

::grpc::Status TransmitterManager::Stub::GetPingMessages(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::ProfileUsersReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetPingMessages_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transmitter::ProfileUsersReply>* TransmitterManager::Stub::AsyncGetPingMessagesRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::transmitter::ProfileUsersReply>(channel_.get(), cq, rpcmethod_GetPingMessages_, context, request);
}

::grpc::Status TransmitterManager::Stub::SendDataMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::transmitter::TransmitterReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendDataMessage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* TransmitterManager::Stub::AsyncSendDataMessageRaw(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>(channel_.get(), cq, rpcmethod_SendDataMessage_, context, request);
}

::grpc::Status TransmitterManager::Stub::GetDataMessages(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::UserDataMessagesReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetDataMessages_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transmitter::UserDataMessagesReply>* TransmitterManager::Stub::AsyncGetDataMessagesRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::transmitter::UserDataMessagesReply>(channel_.get(), cq, rpcmethod_GetDataMessages_, context, request);
}

TransmitterManager::Service::Service() {
  (void)TransmitterManager_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      TransmitterManager_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TransmitterManager::Service, ::transmitter::TransmitterRequest, ::transmitter::TransmitterReply>(
          std::mem_fn(&TransmitterManager::Service::SendMessage), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TransmitterManager_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TransmitterManager::Service, ::transmitter::TransmitterRequest, ::transmitter::TransmitterReply>(
          std::mem_fn(&TransmitterManager::Service::SaveMessage), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TransmitterManager_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TransmitterManager::Service, ::transmitter::ProfileRequest, ::transmitter::TransmitterReply>(
          std::mem_fn(&TransmitterManager::Service::GetUserProfile), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TransmitterManager_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TransmitterManager::Service, ::transmitter::ProfileRequest, ::transmitter::TransmitterReply>(
          std::mem_fn(&TransmitterManager::Service::SetUserProfile), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TransmitterManager_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TransmitterManager::Service, ::transmitter::ProfileRequest, ::transmitter::TransmitterReply>(
          std::mem_fn(&TransmitterManager::Service::UserProfilePing), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TransmitterManager_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TransmitterManager::Service, ::transmitter::ProfileRequest, ::transmitter::ProfileUsersReply>(
          std::mem_fn(&TransmitterManager::Service::GetPingMessages), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TransmitterManager_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TransmitterManager::Service, ::transmitter::TransmitterRequest, ::transmitter::TransmitterReply>(
          std::mem_fn(&TransmitterManager::Service::SendDataMessage), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TransmitterManager_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TransmitterManager::Service, ::transmitter::ProfileRequest, ::transmitter::UserDataMessagesReply>(
          std::mem_fn(&TransmitterManager::Service::GetDataMessages), this)));
}

TransmitterManager::Service::~Service() {
}

::grpc::Status TransmitterManager::Service::SendMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransmitterManager::Service::SaveMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransmitterManager::Service::GetUserProfile(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransmitterManager::Service::SetUserProfile(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransmitterManager::Service::UserProfilePing(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransmitterManager::Service::GetPingMessages(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::ProfileUsersReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransmitterManager::Service::SendDataMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransmitterManager::Service::GetDataMessages(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::UserDataMessagesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace transmitter

