// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: transmitter.proto
#ifndef GRPC_transmitter_2eproto__INCLUDED
#define GRPC_transmitter_2eproto__INCLUDED

#include "transmitter.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace transmitter {

class TransmitterManager GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::transmitter::TransmitterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>> AsyncSendMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>>(AsyncSendMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status SaveMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::transmitter::TransmitterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>> AsyncSaveMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>>(AsyncSaveMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUserProfile(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::TransmitterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>> AsyncGetUserProfile(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>>(AsyncGetUserProfileRaw(context, request, cq));
    }
    virtual ::grpc::Status SetUserProfile(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::TransmitterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>> AsyncSetUserProfile(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>>(AsyncSetUserProfileRaw(context, request, cq));
    }
    virtual ::grpc::Status UserProfilePing(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::TransmitterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>> AsyncUserProfilePing(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>>(AsyncUserProfilePingRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPingMessages(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::ProfileUsersReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::ProfileUsersReply>> AsyncGetPingMessages(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::ProfileUsersReply>>(AsyncGetPingMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status SendDataMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::transmitter::TransmitterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>> AsyncSendDataMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>>(AsyncSendDataMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDataMessages(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::UserDataMessagesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::UserDataMessagesReply>> AsyncGetDataMessages(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::UserDataMessagesReply>>(AsyncGetDataMessagesRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>* AsyncSaveMessageRaw(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>* AsyncGetUserProfileRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>* AsyncSetUserProfileRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>* AsyncUserProfilePingRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::ProfileUsersReply>* AsyncGetPingMessagesRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::TransmitterReply>* AsyncSendDataMessageRaw(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::transmitter::UserDataMessagesReply>* AsyncGetDataMessagesRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::transmitter::TransmitterReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>> AsyncSendMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>>(AsyncSendMessageRaw(context, request, cq));
    }
    ::grpc::Status SaveMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::transmitter::TransmitterReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>> AsyncSaveMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>>(AsyncSaveMessageRaw(context, request, cq));
    }
    ::grpc::Status GetUserProfile(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::TransmitterReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>> AsyncGetUserProfile(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>>(AsyncGetUserProfileRaw(context, request, cq));
    }
    ::grpc::Status SetUserProfile(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::TransmitterReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>> AsyncSetUserProfile(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>>(AsyncSetUserProfileRaw(context, request, cq));
    }
    ::grpc::Status UserProfilePing(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::TransmitterReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>> AsyncUserProfilePing(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>>(AsyncUserProfilePingRaw(context, request, cq));
    }
    ::grpc::Status GetPingMessages(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::ProfileUsersReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::ProfileUsersReply>> AsyncGetPingMessages(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::ProfileUsersReply>>(AsyncGetPingMessagesRaw(context, request, cq));
    }
    ::grpc::Status SendDataMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::transmitter::TransmitterReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>> AsyncSendDataMessage(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>>(AsyncSendDataMessageRaw(context, request, cq));
    }
    ::grpc::Status GetDataMessages(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::transmitter::UserDataMessagesReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::UserDataMessagesReply>> AsyncGetDataMessages(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transmitter::UserDataMessagesReply>>(AsyncGetDataMessagesRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* AsyncSaveMessageRaw(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* AsyncGetUserProfileRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* AsyncSetUserProfileRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* AsyncUserProfilePingRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::transmitter::ProfileUsersReply>* AsyncGetPingMessagesRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::transmitter::TransmitterReply>* AsyncSendDataMessageRaw(::grpc::ClientContext* context, const ::transmitter::TransmitterRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::transmitter::UserDataMessagesReply>* AsyncGetDataMessagesRaw(::grpc::ClientContext* context, const ::transmitter::ProfileRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::RpcMethod rpcmethod_SaveMessage_;
    const ::grpc::RpcMethod rpcmethod_GetUserProfile_;
    const ::grpc::RpcMethod rpcmethod_SetUserProfile_;
    const ::grpc::RpcMethod rpcmethod_UserProfilePing_;
    const ::grpc::RpcMethod rpcmethod_GetPingMessages_;
    const ::grpc::RpcMethod rpcmethod_SendDataMessage_;
    const ::grpc::RpcMethod rpcmethod_GetDataMessages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response);
    virtual ::grpc::Status SaveMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response);
    virtual ::grpc::Status GetUserProfile(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response);
    virtual ::grpc::Status SetUserProfile(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response);
    virtual ::grpc::Status UserProfilePing(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response);
    virtual ::grpc::Status GetPingMessages(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::ProfileUsersReply* response);
    virtual ::grpc::Status SendDataMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response);
    virtual ::grpc::Status GetDataMessages(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::UserDataMessagesReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendMessage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::transmitter::TransmitterRequest* request, ::grpc::ServerAsyncResponseWriter< ::transmitter::TransmitterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SaveMessage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SaveMessage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveMessage(::grpc::ServerContext* context, ::transmitter::TransmitterRequest* request, ::grpc::ServerAsyncResponseWriter< ::transmitter::TransmitterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetUserProfile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetUserProfile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserProfile(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserProfile(::grpc::ServerContext* context, ::transmitter::ProfileRequest* request, ::grpc::ServerAsyncResponseWriter< ::transmitter::TransmitterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetUserProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetUserProfile() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetUserProfile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserProfile(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUserProfile(::grpc::ServerContext* context, ::transmitter::ProfileRequest* request, ::grpc::ServerAsyncResponseWriter< ::transmitter::TransmitterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UserProfilePing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UserProfilePing() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UserProfilePing() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserProfilePing(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserProfilePing(::grpc::ServerContext* context, ::transmitter::ProfileRequest* request, ::grpc::ServerAsyncResponseWriter< ::transmitter::TransmitterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPingMessages() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetPingMessages() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPingMessages(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::ProfileUsersReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPingMessages(::grpc::ServerContext* context, ::transmitter::ProfileRequest* request, ::grpc::ServerAsyncResponseWriter< ::transmitter::ProfileUsersReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDataMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendDataMessage() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SendDataMessage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDataMessage(::grpc::ServerContext* context, ::transmitter::TransmitterRequest* request, ::grpc::ServerAsyncResponseWriter< ::transmitter::TransmitterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDataMessages() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetDataMessages() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataMessages(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::UserDataMessagesReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataMessages(::grpc::ServerContext* context, ::transmitter::ProfileRequest* request, ::grpc::ServerAsyncResponseWriter< ::transmitter::UserDataMessagesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendMessage<WithAsyncMethod_SaveMessage<WithAsyncMethod_GetUserProfile<WithAsyncMethod_SetUserProfile<WithAsyncMethod_UserProfilePing<WithAsyncMethod_GetPingMessages<WithAsyncMethod_SendDataMessage<WithAsyncMethod_GetDataMessages<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendMessage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SaveMessage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SaveMessage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetUserProfile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetUserProfile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserProfile(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetUserProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetUserProfile() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetUserProfile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserProfile(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UserProfilePing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UserProfilePing() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UserProfilePing() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserProfilePing(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPingMessages() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetPingMessages() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPingMessages(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::ProfileUsersReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDataMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendDataMessage() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SendDataMessage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDataMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDataMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDataMessages() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetDataMessages() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataMessages(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::UserDataMessagesReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamedUnary(0,
        new ::grpc::StreamedUnaryHandler< ::transmitter::TransmitterRequest, ::transmitter::TransmitterReply>(std::bind(&WithStreamedUnaryMethod_SendMessage<BaseClass>::StreamedSendMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendMessage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::transmitter::TransmitterRequest,::transmitter::TransmitterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SaveMessage() {
      ::grpc::Service::MarkMethodStreamedUnary(1,
        new ::grpc::StreamedUnaryHandler< ::transmitter::TransmitterRequest, ::transmitter::TransmitterReply>(std::bind(&WithStreamedUnaryMethod_SaveMessage<BaseClass>::StreamedSaveMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SaveMessage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::transmitter::TransmitterRequest,::transmitter::TransmitterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetUserProfile() {
      ::grpc::Service::MarkMethodStreamedUnary(2,
        new ::grpc::StreamedUnaryHandler< ::transmitter::ProfileRequest, ::transmitter::TransmitterReply>(std::bind(&WithStreamedUnaryMethod_GetUserProfile<BaseClass>::StreamedGetUserProfile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetUserProfile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserProfile(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserProfile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::transmitter::ProfileRequest,::transmitter::TransmitterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetUserProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetUserProfile() {
      ::grpc::Service::MarkMethodStreamedUnary(3,
        new ::grpc::StreamedUnaryHandler< ::transmitter::ProfileRequest, ::transmitter::TransmitterReply>(std::bind(&WithStreamedUnaryMethod_SetUserProfile<BaseClass>::StreamedSetUserProfile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetUserProfile() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetUserProfile(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetUserProfile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::transmitter::ProfileRequest,::transmitter::TransmitterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserProfilePing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UserProfilePing() {
      ::grpc::Service::MarkMethodStreamedUnary(4,
        new ::grpc::StreamedUnaryHandler< ::transmitter::ProfileRequest, ::transmitter::TransmitterReply>(std::bind(&WithStreamedUnaryMethod_UserProfilePing<BaseClass>::StreamedUserProfilePing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UserProfilePing() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserProfilePing(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserProfilePing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::transmitter::ProfileRequest,::transmitter::TransmitterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPingMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPingMessages() {
      ::grpc::Service::MarkMethodStreamedUnary(5,
        new ::grpc::StreamedUnaryHandler< ::transmitter::ProfileRequest, ::transmitter::ProfileUsersReply>(std::bind(&WithStreamedUnaryMethod_GetPingMessages<BaseClass>::StreamedGetPingMessages, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPingMessages() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPingMessages(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::ProfileUsersReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPingMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::transmitter::ProfileRequest,::transmitter::ProfileUsersReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendDataMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendDataMessage() {
      ::grpc::Service::MarkMethodStreamedUnary(6,
        new ::grpc::StreamedUnaryHandler< ::transmitter::TransmitterRequest, ::transmitter::TransmitterReply>(std::bind(&WithStreamedUnaryMethod_SendDataMessage<BaseClass>::StreamedSendDataMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendDataMessage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendDataMessage(::grpc::ServerContext* context, const ::transmitter::TransmitterRequest* request, ::transmitter::TransmitterReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendDataMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::transmitter::TransmitterRequest,::transmitter::TransmitterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDataMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDataMessages() {
      ::grpc::Service::MarkMethodStreamedUnary(7,
        new ::grpc::StreamedUnaryHandler< ::transmitter::ProfileRequest, ::transmitter::UserDataMessagesReply>(std::bind(&WithStreamedUnaryMethod_GetDataMessages<BaseClass>::StreamedGetDataMessages, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDataMessages() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataMessages(::grpc::ServerContext* context, const ::transmitter::ProfileRequest* request, ::transmitter::UserDataMessagesReply* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDataMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::transmitter::ProfileRequest,::transmitter::UserDataMessagesReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_SaveMessage<WithStreamedUnaryMethod_GetUserProfile<WithStreamedUnaryMethod_SetUserProfile<WithStreamedUnaryMethod_UserProfilePing<WithStreamedUnaryMethod_GetPingMessages<WithStreamedUnaryMethod_SendDataMessage<WithStreamedUnaryMethod_GetDataMessages<Service > > > > > > > > StreamedUnaryService;
};

}  // namespace transmitter


#endif  // GRPC_transmitter_2eproto__INCLUDED
