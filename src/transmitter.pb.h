// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transmitter.proto

#ifndef PROTOBUF_transmitter_2eproto__INCLUDED
#define PROTOBUF_transmitter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace transmitter {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_transmitter_2eproto();
void protobuf_AssignDesc_transmitter_2eproto();
void protobuf_ShutdownFile_transmitter_2eproto();

class ProfileRequest;
class ProfileUsersReply;
class TransmitterReply;
class TransmitterRequest;
class UserDataMessagesReply;

// ===================================================================

class TransmitterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmitter.TransmitterRequest) */ {
 public:
  TransmitterRequest();
  virtual ~TransmitterRequest();

  TransmitterRequest(const TransmitterRequest& from);

  inline TransmitterRequest& operator=(const TransmitterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmitterRequest& default_instance();

  void Swap(TransmitterRequest* other);

  // implements Message ----------------------------------------------

  inline TransmitterRequest* New() const { return New(NULL); }

  TransmitterRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransmitterRequest& from);
  void MergeFrom(const TransmitterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransmitterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string magicNumber = 1;
  void clear_magicnumber();
  static const int kMagicNumberFieldNumber = 1;
  const ::std::string& magicnumber() const;
  void set_magicnumber(const ::std::string& value);
  void set_magicnumber(const char* value);
  void set_magicnumber(const char* value, size_t size);
  ::std::string* mutable_magicnumber();
  ::std::string* release_magicnumber();
  void set_allocated_magicnumber(::std::string* magicnumber);

  // optional string messageId = 2;
  void clear_messageid();
  static const int kMessageIdFieldNumber = 2;
  const ::std::string& messageid() const;
  void set_messageid(const ::std::string& value);
  void set_messageid(const char* value);
  void set_messageid(const char* value, size_t size);
  ::std::string* mutable_messageid();
  ::std::string* release_messageid();
  void set_allocated_messageid(::std::string* messageid);

  // optional string messageType = 3;
  void clear_messagetype();
  static const int kMessageTypeFieldNumber = 3;
  const ::std::string& messagetype() const;
  void set_messagetype(const ::std::string& value);
  void set_messagetype(const char* value);
  void set_messagetype(const char* value, size_t size);
  ::std::string* mutable_messagetype();
  ::std::string* release_messagetype();
  void set_allocated_messagetype(::std::string* messagetype);

  // optional string messageDataType = 4;
  void clear_messagedatatype();
  static const int kMessageDataTypeFieldNumber = 4;
  const ::std::string& messagedatatype() const;
  void set_messagedatatype(const ::std::string& value);
  void set_messagedatatype(const char* value);
  void set_messagedatatype(const char* value, size_t size);
  ::std::string* mutable_messagedatatype();
  ::std::string* release_messagedatatype();
  void set_allocated_messagedatatype(::std::string* messagedatatype);

  // optional string messageTimestamp = 5;
  void clear_messagetimestamp();
  static const int kMessageTimestampFieldNumber = 5;
  const ::std::string& messagetimestamp() const;
  void set_messagetimestamp(const ::std::string& value);
  void set_messagetimestamp(const char* value);
  void set_messagetimestamp(const char* value, size_t size);
  ::std::string* mutable_messagetimestamp();
  ::std::string* release_messagetimestamp();
  void set_allocated_messagetimestamp(::std::string* messagetimestamp);

  // optional string senderName = 6;
  void clear_sendername();
  static const int kSenderNameFieldNumber = 6;
  const ::std::string& sendername() const;
  void set_sendername(const ::std::string& value);
  void set_sendername(const char* value);
  void set_sendername(const char* value, size_t size);
  ::std::string* mutable_sendername();
  ::std::string* release_sendername();
  void set_allocated_sendername(::std::string* sendername);

  // optional string senderKey = 7;
  void clear_senderkey();
  static const int kSenderKeyFieldNumber = 7;
  const ::std::string& senderkey() const;
  void set_senderkey(const ::std::string& value);
  void set_senderkey(const char* value);
  void set_senderkey(const char* value, size_t size);
  ::std::string* mutable_senderkey();
  ::std::string* release_senderkey();
  void set_allocated_senderkey(::std::string* senderkey);

  // optional string recipientName = 8;
  void clear_recipientname();
  static const int kRecipientNameFieldNumber = 8;
  const ::std::string& recipientname() const;
  void set_recipientname(const ::std::string& value);
  void set_recipientname(const char* value);
  void set_recipientname(const char* value, size_t size);
  ::std::string* mutable_recipientname();
  ::std::string* release_recipientname();
  void set_allocated_recipientname(::std::string* recipientname);

  // optional string messageData = 9;
  void clear_messagedata();
  static const int kMessageDataFieldNumber = 9;
  const ::std::string& messagedata() const;
  void set_messagedata(const ::std::string& value);
  void set_messagedata(const char* value);
  void set_messagedata(const char* value, size_t size);
  ::std::string* mutable_messagedata();
  ::std::string* release_messagedata();
  void set_allocated_messagedata(::std::string* messagedata);

  // @@protoc_insertion_point(class_scope:transmitter.TransmitterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr magicnumber_;
  ::google::protobuf::internal::ArenaStringPtr messageid_;
  ::google::protobuf::internal::ArenaStringPtr messagetype_;
  ::google::protobuf::internal::ArenaStringPtr messagedatatype_;
  ::google::protobuf::internal::ArenaStringPtr messagetimestamp_;
  ::google::protobuf::internal::ArenaStringPtr sendername_;
  ::google::protobuf::internal::ArenaStringPtr senderkey_;
  ::google::protobuf::internal::ArenaStringPtr recipientname_;
  ::google::protobuf::internal::ArenaStringPtr messagedata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transmitter_2eproto();
  friend void protobuf_AssignDesc_transmitter_2eproto();
  friend void protobuf_ShutdownFile_transmitter_2eproto();

  void InitAsDefaultInstance();
  static TransmitterRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserDataMessagesReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmitter.UserDataMessagesReply) */ {
 public:
  UserDataMessagesReply();
  virtual ~UserDataMessagesReply();

  UserDataMessagesReply(const UserDataMessagesReply& from);

  inline UserDataMessagesReply& operator=(const UserDataMessagesReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDataMessagesReply& default_instance();

  void Swap(UserDataMessagesReply* other);

  // implements Message ----------------------------------------------

  inline UserDataMessagesReply* New() const { return New(NULL); }

  UserDataMessagesReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserDataMessagesReply& from);
  void MergeFrom(const UserDataMessagesReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserDataMessagesReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transmitter.TransmitterRequest messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  const ::transmitter::TransmitterRequest& messages(int index) const;
  ::transmitter::TransmitterRequest* mutable_messages(int index);
  ::transmitter::TransmitterRequest* add_messages();
  ::google::protobuf::RepeatedPtrField< ::transmitter::TransmitterRequest >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::transmitter::TransmitterRequest >&
      messages() const;

  // @@protoc_insertion_point(class_scope:transmitter.UserDataMessagesReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::transmitter::TransmitterRequest > messages_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transmitter_2eproto();
  friend void protobuf_AssignDesc_transmitter_2eproto();
  friend void protobuf_ShutdownFile_transmitter_2eproto();

  void InitAsDefaultInstance();
  static UserDataMessagesReply* default_instance_;
};
// -------------------------------------------------------------------

class ProfileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmitter.ProfileRequest) */ {
 public:
  ProfileRequest();
  virtual ~ProfileRequest();

  ProfileRequest(const ProfileRequest& from);

  inline ProfileRequest& operator=(const ProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileRequest& default_instance();

  void Swap(ProfileRequest* other);

  // implements Message ----------------------------------------------

  inline ProfileRequest* New() const { return New(NULL); }

  ProfileRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfileRequest& from);
  void MergeFrom(const ProfileRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string publicKey = 2;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  void set_publickey(const char* value);
  void set_publickey(const char* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // optional string privateKey = 3;
  void clear_privatekey();
  static const int kPrivateKeyFieldNumber = 3;
  const ::std::string& privatekey() const;
  void set_privatekey(const ::std::string& value);
  void set_privatekey(const char* value);
  void set_privatekey(const char* value, size_t size);
  ::std::string* mutable_privatekey();
  ::std::string* release_privatekey();
  void set_allocated_privatekey(::std::string* privatekey);

  // optional string lastTimestamp = 4;
  void clear_lasttimestamp();
  static const int kLastTimestampFieldNumber = 4;
  const ::std::string& lasttimestamp() const;
  void set_lasttimestamp(const ::std::string& value);
  void set_lasttimestamp(const char* value);
  void set_lasttimestamp(const char* value, size_t size);
  ::std::string* mutable_lasttimestamp();
  ::std::string* release_lasttimestamp();
  void set_allocated_lasttimestamp(::std::string* lasttimestamp);

  // @@protoc_insertion_point(class_scope:transmitter.ProfileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  ::google::protobuf::internal::ArenaStringPtr privatekey_;
  ::google::protobuf::internal::ArenaStringPtr lasttimestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transmitter_2eproto();
  friend void protobuf_AssignDesc_transmitter_2eproto();
  friend void protobuf_ShutdownFile_transmitter_2eproto();

  void InitAsDefaultInstance();
  static ProfileRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProfileUsersReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmitter.ProfileUsersReply) */ {
 public:
  ProfileUsersReply();
  virtual ~ProfileUsersReply();

  ProfileUsersReply(const ProfileUsersReply& from);

  inline ProfileUsersReply& operator=(const ProfileUsersReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileUsersReply& default_instance();

  void Swap(ProfileUsersReply* other);

  // implements Message ----------------------------------------------

  inline ProfileUsersReply* New() const { return New(NULL); }

  ProfileUsersReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfileUsersReply& from);
  void MergeFrom(const ProfileUsersReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfileUsersReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transmitter.ProfileRequest users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  const ::transmitter::ProfileRequest& users(int index) const;
  ::transmitter::ProfileRequest* mutable_users(int index);
  ::transmitter::ProfileRequest* add_users();
  ::google::protobuf::RepeatedPtrField< ::transmitter::ProfileRequest >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::transmitter::ProfileRequest >&
      users() const;

  // @@protoc_insertion_point(class_scope:transmitter.ProfileUsersReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::transmitter::ProfileRequest > users_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transmitter_2eproto();
  friend void protobuf_AssignDesc_transmitter_2eproto();
  friend void protobuf_ShutdownFile_transmitter_2eproto();

  void InitAsDefaultInstance();
  static ProfileUsersReply* default_instance_;
};
// -------------------------------------------------------------------

class TransmitterReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transmitter.TransmitterReply) */ {
 public:
  TransmitterReply();
  virtual ~TransmitterReply();

  TransmitterReply(const TransmitterReply& from);

  inline TransmitterReply& operator=(const TransmitterReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmitterReply& default_instance();

  void Swap(TransmitterReply* other);

  // implements Message ----------------------------------------------

  inline TransmitterReply* New() const { return New(NULL); }

  TransmitterReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransmitterReply& from);
  void MergeFrom(const TransmitterReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransmitterReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool response = 1;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  bool response() const;
  void set_response(bool value);

  // optional string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:transmitter.TransmitterReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  bool response_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transmitter_2eproto();
  friend void protobuf_AssignDesc_transmitter_2eproto();
  friend void protobuf_ShutdownFile_transmitter_2eproto();

  void InitAsDefaultInstance();
  static TransmitterReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TransmitterRequest

// optional string magicNumber = 1;
inline void TransmitterRequest::clear_magicnumber() {
  magicnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmitterRequest::magicnumber() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterRequest.magicNumber)
  return magicnumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_magicnumber(const ::std::string& value) {
  
  magicnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.TransmitterRequest.magicNumber)
}
inline void TransmitterRequest::set_magicnumber(const char* value) {
  
  magicnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.TransmitterRequest.magicNumber)
}
inline void TransmitterRequest::set_magicnumber(const char* value, size_t size) {
  
  magicnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.TransmitterRequest.magicNumber)
}
inline ::std::string* TransmitterRequest::mutable_magicnumber() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.TransmitterRequest.magicNumber)
  return magicnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmitterRequest::release_magicnumber() {
  // @@protoc_insertion_point(field_release:transmitter.TransmitterRequest.magicNumber)
  
  return magicnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_allocated_magicnumber(::std::string* magicnumber) {
  if (magicnumber != NULL) {
    
  } else {
    
  }
  magicnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), magicnumber);
  // @@protoc_insertion_point(field_set_allocated:transmitter.TransmitterRequest.magicNumber)
}

// optional string messageId = 2;
inline void TransmitterRequest::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmitterRequest::messageid() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterRequest.messageId)
  return messageid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_messageid(const ::std::string& value) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.TransmitterRequest.messageId)
}
inline void TransmitterRequest::set_messageid(const char* value) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.TransmitterRequest.messageId)
}
inline void TransmitterRequest::set_messageid(const char* value, size_t size) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.TransmitterRequest.messageId)
}
inline ::std::string* TransmitterRequest::mutable_messageid() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.TransmitterRequest.messageId)
  return messageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmitterRequest::release_messageid() {
  // @@protoc_insertion_point(field_release:transmitter.TransmitterRequest.messageId)
  
  return messageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_allocated_messageid(::std::string* messageid) {
  if (messageid != NULL) {
    
  } else {
    
  }
  messageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:transmitter.TransmitterRequest.messageId)
}

// optional string messageType = 3;
inline void TransmitterRequest::clear_messagetype() {
  messagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmitterRequest::messagetype() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterRequest.messageType)
  return messagetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_messagetype(const ::std::string& value) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.TransmitterRequest.messageType)
}
inline void TransmitterRequest::set_messagetype(const char* value) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.TransmitterRequest.messageType)
}
inline void TransmitterRequest::set_messagetype(const char* value, size_t size) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.TransmitterRequest.messageType)
}
inline ::std::string* TransmitterRequest::mutable_messagetype() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.TransmitterRequest.messageType)
  return messagetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmitterRequest::release_messagetype() {
  // @@protoc_insertion_point(field_release:transmitter.TransmitterRequest.messageType)
  
  return messagetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_allocated_messagetype(::std::string* messagetype) {
  if (messagetype != NULL) {
    
  } else {
    
  }
  messagetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagetype);
  // @@protoc_insertion_point(field_set_allocated:transmitter.TransmitterRequest.messageType)
}

// optional string messageDataType = 4;
inline void TransmitterRequest::clear_messagedatatype() {
  messagedatatype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmitterRequest::messagedatatype() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterRequest.messageDataType)
  return messagedatatype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_messagedatatype(const ::std::string& value) {
  
  messagedatatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.TransmitterRequest.messageDataType)
}
inline void TransmitterRequest::set_messagedatatype(const char* value) {
  
  messagedatatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.TransmitterRequest.messageDataType)
}
inline void TransmitterRequest::set_messagedatatype(const char* value, size_t size) {
  
  messagedatatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.TransmitterRequest.messageDataType)
}
inline ::std::string* TransmitterRequest::mutable_messagedatatype() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.TransmitterRequest.messageDataType)
  return messagedatatype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmitterRequest::release_messagedatatype() {
  // @@protoc_insertion_point(field_release:transmitter.TransmitterRequest.messageDataType)
  
  return messagedatatype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_allocated_messagedatatype(::std::string* messagedatatype) {
  if (messagedatatype != NULL) {
    
  } else {
    
  }
  messagedatatype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagedatatype);
  // @@protoc_insertion_point(field_set_allocated:transmitter.TransmitterRequest.messageDataType)
}

// optional string messageTimestamp = 5;
inline void TransmitterRequest::clear_messagetimestamp() {
  messagetimestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmitterRequest::messagetimestamp() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterRequest.messageTimestamp)
  return messagetimestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_messagetimestamp(const ::std::string& value) {
  
  messagetimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.TransmitterRequest.messageTimestamp)
}
inline void TransmitterRequest::set_messagetimestamp(const char* value) {
  
  messagetimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.TransmitterRequest.messageTimestamp)
}
inline void TransmitterRequest::set_messagetimestamp(const char* value, size_t size) {
  
  messagetimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.TransmitterRequest.messageTimestamp)
}
inline ::std::string* TransmitterRequest::mutable_messagetimestamp() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.TransmitterRequest.messageTimestamp)
  return messagetimestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmitterRequest::release_messagetimestamp() {
  // @@protoc_insertion_point(field_release:transmitter.TransmitterRequest.messageTimestamp)
  
  return messagetimestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_allocated_messagetimestamp(::std::string* messagetimestamp) {
  if (messagetimestamp != NULL) {
    
  } else {
    
  }
  messagetimestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagetimestamp);
  // @@protoc_insertion_point(field_set_allocated:transmitter.TransmitterRequest.messageTimestamp)
}

// optional string senderName = 6;
inline void TransmitterRequest::clear_sendername() {
  sendername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmitterRequest::sendername() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterRequest.senderName)
  return sendername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_sendername(const ::std::string& value) {
  
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.TransmitterRequest.senderName)
}
inline void TransmitterRequest::set_sendername(const char* value) {
  
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.TransmitterRequest.senderName)
}
inline void TransmitterRequest::set_sendername(const char* value, size_t size) {
  
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.TransmitterRequest.senderName)
}
inline ::std::string* TransmitterRequest::mutable_sendername() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.TransmitterRequest.senderName)
  return sendername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmitterRequest::release_sendername() {
  // @@protoc_insertion_point(field_release:transmitter.TransmitterRequest.senderName)
  
  return sendername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_allocated_sendername(::std::string* sendername) {
  if (sendername != NULL) {
    
  } else {
    
  }
  sendername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendername);
  // @@protoc_insertion_point(field_set_allocated:transmitter.TransmitterRequest.senderName)
}

// optional string senderKey = 7;
inline void TransmitterRequest::clear_senderkey() {
  senderkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmitterRequest::senderkey() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterRequest.senderKey)
  return senderkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_senderkey(const ::std::string& value) {
  
  senderkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.TransmitterRequest.senderKey)
}
inline void TransmitterRequest::set_senderkey(const char* value) {
  
  senderkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.TransmitterRequest.senderKey)
}
inline void TransmitterRequest::set_senderkey(const char* value, size_t size) {
  
  senderkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.TransmitterRequest.senderKey)
}
inline ::std::string* TransmitterRequest::mutable_senderkey() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.TransmitterRequest.senderKey)
  return senderkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmitterRequest::release_senderkey() {
  // @@protoc_insertion_point(field_release:transmitter.TransmitterRequest.senderKey)
  
  return senderkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_allocated_senderkey(::std::string* senderkey) {
  if (senderkey != NULL) {
    
  } else {
    
  }
  senderkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senderkey);
  // @@protoc_insertion_point(field_set_allocated:transmitter.TransmitterRequest.senderKey)
}

// optional string recipientName = 8;
inline void TransmitterRequest::clear_recipientname() {
  recipientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmitterRequest::recipientname() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterRequest.recipientName)
  return recipientname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_recipientname(const ::std::string& value) {
  
  recipientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.TransmitterRequest.recipientName)
}
inline void TransmitterRequest::set_recipientname(const char* value) {
  
  recipientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.TransmitterRequest.recipientName)
}
inline void TransmitterRequest::set_recipientname(const char* value, size_t size) {
  
  recipientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.TransmitterRequest.recipientName)
}
inline ::std::string* TransmitterRequest::mutable_recipientname() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.TransmitterRequest.recipientName)
  return recipientname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmitterRequest::release_recipientname() {
  // @@protoc_insertion_point(field_release:transmitter.TransmitterRequest.recipientName)
  
  return recipientname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_allocated_recipientname(::std::string* recipientname) {
  if (recipientname != NULL) {
    
  } else {
    
  }
  recipientname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipientname);
  // @@protoc_insertion_point(field_set_allocated:transmitter.TransmitterRequest.recipientName)
}

// optional string messageData = 9;
inline void TransmitterRequest::clear_messagedata() {
  messagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmitterRequest::messagedata() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterRequest.messageData)
  return messagedata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_messagedata(const ::std::string& value) {
  
  messagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.TransmitterRequest.messageData)
}
inline void TransmitterRequest::set_messagedata(const char* value) {
  
  messagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.TransmitterRequest.messageData)
}
inline void TransmitterRequest::set_messagedata(const char* value, size_t size) {
  
  messagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.TransmitterRequest.messageData)
}
inline ::std::string* TransmitterRequest::mutable_messagedata() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.TransmitterRequest.messageData)
  return messagedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmitterRequest::release_messagedata() {
  // @@protoc_insertion_point(field_release:transmitter.TransmitterRequest.messageData)
  
  return messagedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterRequest::set_allocated_messagedata(::std::string* messagedata) {
  if (messagedata != NULL) {
    
  } else {
    
  }
  messagedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagedata);
  // @@protoc_insertion_point(field_set_allocated:transmitter.TransmitterRequest.messageData)
}

// -------------------------------------------------------------------

// UserDataMessagesReply

// repeated .transmitter.TransmitterRequest messages = 1;
inline int UserDataMessagesReply::messages_size() const {
  return messages_.size();
}
inline void UserDataMessagesReply::clear_messages() {
  messages_.Clear();
}
inline const ::transmitter::TransmitterRequest& UserDataMessagesReply::messages(int index) const {
  // @@protoc_insertion_point(field_get:transmitter.UserDataMessagesReply.messages)
  return messages_.Get(index);
}
inline ::transmitter::TransmitterRequest* UserDataMessagesReply::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:transmitter.UserDataMessagesReply.messages)
  return messages_.Mutable(index);
}
inline ::transmitter::TransmitterRequest* UserDataMessagesReply::add_messages() {
  // @@protoc_insertion_point(field_add:transmitter.UserDataMessagesReply.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::transmitter::TransmitterRequest >*
UserDataMessagesReply::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:transmitter.UserDataMessagesReply.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::transmitter::TransmitterRequest >&
UserDataMessagesReply::messages() const {
  // @@protoc_insertion_point(field_list:transmitter.UserDataMessagesReply.messages)
  return messages_;
}

// -------------------------------------------------------------------

// ProfileRequest

// optional string name = 1;
inline void ProfileRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileRequest::name() const {
  // @@protoc_insertion_point(field_get:transmitter.ProfileRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.ProfileRequest.name)
}
inline void ProfileRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.ProfileRequest.name)
}
inline void ProfileRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.ProfileRequest.name)
}
inline ::std::string* ProfileRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.ProfileRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileRequest::release_name() {
  // @@protoc_insertion_point(field_release:transmitter.ProfileRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:transmitter.ProfileRequest.name)
}

// optional string publicKey = 2;
inline void ProfileRequest::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileRequest::publickey() const {
  // @@protoc_insertion_point(field_get:transmitter.ProfileRequest.publicKey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.ProfileRequest.publicKey)
}
inline void ProfileRequest::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.ProfileRequest.publicKey)
}
inline void ProfileRequest::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.ProfileRequest.publicKey)
}
inline ::std::string* ProfileRequest::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.ProfileRequest.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileRequest::release_publickey() {
  // @@protoc_insertion_point(field_release:transmitter.ProfileRequest.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:transmitter.ProfileRequest.publicKey)
}

// optional string privateKey = 3;
inline void ProfileRequest::clear_privatekey() {
  privatekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileRequest::privatekey() const {
  // @@protoc_insertion_point(field_get:transmitter.ProfileRequest.privateKey)
  return privatekey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_privatekey(const ::std::string& value) {
  
  privatekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.ProfileRequest.privateKey)
}
inline void ProfileRequest::set_privatekey(const char* value) {
  
  privatekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.ProfileRequest.privateKey)
}
inline void ProfileRequest::set_privatekey(const char* value, size_t size) {
  
  privatekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.ProfileRequest.privateKey)
}
inline ::std::string* ProfileRequest::mutable_privatekey() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.ProfileRequest.privateKey)
  return privatekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileRequest::release_privatekey() {
  // @@protoc_insertion_point(field_release:transmitter.ProfileRequest.privateKey)
  
  return privatekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_allocated_privatekey(::std::string* privatekey) {
  if (privatekey != NULL) {
    
  } else {
    
  }
  privatekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), privatekey);
  // @@protoc_insertion_point(field_set_allocated:transmitter.ProfileRequest.privateKey)
}

// optional string lastTimestamp = 4;
inline void ProfileRequest::clear_lasttimestamp() {
  lasttimestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileRequest::lasttimestamp() const {
  // @@protoc_insertion_point(field_get:transmitter.ProfileRequest.lastTimestamp)
  return lasttimestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_lasttimestamp(const ::std::string& value) {
  
  lasttimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.ProfileRequest.lastTimestamp)
}
inline void ProfileRequest::set_lasttimestamp(const char* value) {
  
  lasttimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.ProfileRequest.lastTimestamp)
}
inline void ProfileRequest::set_lasttimestamp(const char* value, size_t size) {
  
  lasttimestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.ProfileRequest.lastTimestamp)
}
inline ::std::string* ProfileRequest::mutable_lasttimestamp() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.ProfileRequest.lastTimestamp)
  return lasttimestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileRequest::release_lasttimestamp() {
  // @@protoc_insertion_point(field_release:transmitter.ProfileRequest.lastTimestamp)
  
  return lasttimestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_allocated_lasttimestamp(::std::string* lasttimestamp) {
  if (lasttimestamp != NULL) {
    
  } else {
    
  }
  lasttimestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lasttimestamp);
  // @@protoc_insertion_point(field_set_allocated:transmitter.ProfileRequest.lastTimestamp)
}

// -------------------------------------------------------------------

// ProfileUsersReply

// repeated .transmitter.ProfileRequest users = 1;
inline int ProfileUsersReply::users_size() const {
  return users_.size();
}
inline void ProfileUsersReply::clear_users() {
  users_.Clear();
}
inline const ::transmitter::ProfileRequest& ProfileUsersReply::users(int index) const {
  // @@protoc_insertion_point(field_get:transmitter.ProfileUsersReply.users)
  return users_.Get(index);
}
inline ::transmitter::ProfileRequest* ProfileUsersReply::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:transmitter.ProfileUsersReply.users)
  return users_.Mutable(index);
}
inline ::transmitter::ProfileRequest* ProfileUsersReply::add_users() {
  // @@protoc_insertion_point(field_add:transmitter.ProfileUsersReply.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::transmitter::ProfileRequest >*
ProfileUsersReply::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:transmitter.ProfileUsersReply.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::transmitter::ProfileRequest >&
ProfileUsersReply::users() const {
  // @@protoc_insertion_point(field_list:transmitter.ProfileUsersReply.users)
  return users_;
}

// -------------------------------------------------------------------

// TransmitterReply

// optional bool response = 1;
inline void TransmitterReply::clear_response() {
  response_ = false;
}
inline bool TransmitterReply::response() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterReply.response)
  return response_;
}
inline void TransmitterReply::set_response(bool value) {
  
  response_ = value;
  // @@protoc_insertion_point(field_set:transmitter.TransmitterReply.response)
}

// optional string data = 2;
inline void TransmitterReply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmitterReply::data() const {
  // @@protoc_insertion_point(field_get:transmitter.TransmitterReply.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterReply::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transmitter.TransmitterReply.data)
}
inline void TransmitterReply::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transmitter.TransmitterReply.data)
}
inline void TransmitterReply::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transmitter.TransmitterReply.data)
}
inline ::std::string* TransmitterReply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:transmitter.TransmitterReply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmitterReply::release_data() {
  // @@protoc_insertion_point(field_release:transmitter.TransmitterReply.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitterReply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:transmitter.TransmitterReply.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transmitter

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transmitter_2eproto__INCLUDED
