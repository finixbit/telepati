/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.transmitter.ProfileRequest', null, global);
goog.exportSymbol('proto.transmitter.ProfileUsersReply', null, global);
goog.exportSymbol('proto.transmitter.TransmitterReply', null, global);
goog.exportSymbol('proto.transmitter.TransmitterRequest', null, global);
goog.exportSymbol('proto.transmitter.UserDataMessagesReply', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transmitter.TransmitterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transmitter.TransmitterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.transmitter.TransmitterRequest.displayName = 'proto.transmitter.TransmitterRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transmitter.TransmitterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.transmitter.TransmitterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transmitter.TransmitterRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.transmitter.TransmitterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    magicnumber: msg.getMagicnumber(),
    messageid: msg.getMessageid(),
    messagetype: msg.getMessagetype(),
    messagedatatype: msg.getMessagedatatype(),
    messagetimestamp: msg.getMessagetimestamp(),
    sendername: msg.getSendername(),
    senderkey: msg.getSenderkey(),
    recipientname: msg.getRecipientname(),
    messagedata: msg.getMessagedata()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transmitter.TransmitterRequest}
 */
proto.transmitter.TransmitterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transmitter.TransmitterRequest;
  return proto.transmitter.TransmitterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transmitter.TransmitterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transmitter.TransmitterRequest}
 */
proto.transmitter.TransmitterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMagicnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagetype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagedatatype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagetimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderkey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientname(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagedata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.transmitter.TransmitterRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.transmitter.TransmitterRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transmitter.TransmitterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.transmitter.TransmitterRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMagicnumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getMessageid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMessagetype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getMessagedatatype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getMessagetimestamp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getSendername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getSenderkey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getRecipientname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getMessagedata();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.transmitter.TransmitterRequest} The clone.
 */
proto.transmitter.TransmitterRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.transmitter.TransmitterRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string magicNumber = 1;
 * @return {string}
 */
proto.transmitter.TransmitterRequest.prototype.getMagicnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.transmitter.TransmitterRequest.prototype.setMagicnumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string messageId = 2;
 * @return {string}
 */
proto.transmitter.TransmitterRequest.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.transmitter.TransmitterRequest.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string messageType = 3;
 * @return {string}
 */
proto.transmitter.TransmitterRequest.prototype.getMessagetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.transmitter.TransmitterRequest.prototype.setMessagetype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string messageDataType = 4;
 * @return {string}
 */
proto.transmitter.TransmitterRequest.prototype.getMessagedatatype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.transmitter.TransmitterRequest.prototype.setMessagedatatype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string messageTimestamp = 5;
 * @return {string}
 */
proto.transmitter.TransmitterRequest.prototype.getMessagetimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.transmitter.TransmitterRequest.prototype.setMessagetimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string senderName = 6;
 * @return {string}
 */
proto.transmitter.TransmitterRequest.prototype.getSendername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.transmitter.TransmitterRequest.prototype.setSendername = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string senderKey = 7;
 * @return {string}
 */
proto.transmitter.TransmitterRequest.prototype.getSenderkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.transmitter.TransmitterRequest.prototype.setSenderkey = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string recipientName = 8;
 * @return {string}
 */
proto.transmitter.TransmitterRequest.prototype.getRecipientname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.transmitter.TransmitterRequest.prototype.setRecipientname = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string messageData = 9;
 * @return {string}
 */
proto.transmitter.TransmitterRequest.prototype.getMessagedata = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.transmitter.TransmitterRequest.prototype.setMessagedata = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transmitter.UserDataMessagesReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transmitter.UserDataMessagesReply.repeatedFields_, null);
};
goog.inherits(proto.transmitter.UserDataMessagesReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.transmitter.UserDataMessagesReply.displayName = 'proto.transmitter.UserDataMessagesReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transmitter.UserDataMessagesReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transmitter.UserDataMessagesReply.prototype.toObject = function(opt_includeInstance) {
  return proto.transmitter.UserDataMessagesReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transmitter.UserDataMessagesReply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.transmitter.UserDataMessagesReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.transmitter.TransmitterRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transmitter.UserDataMessagesReply}
 */
proto.transmitter.UserDataMessagesReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transmitter.UserDataMessagesReply;
  return proto.transmitter.UserDataMessagesReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transmitter.UserDataMessagesReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transmitter.UserDataMessagesReply}
 */
proto.transmitter.UserDataMessagesReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.transmitter.TransmitterRequest;
      reader.readMessage(value,proto.transmitter.TransmitterRequest.deserializeBinaryFromReader);
      msg.getMessagesList().push(value);
      msg.setMessagesList(msg.getMessagesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.transmitter.UserDataMessagesReply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.transmitter.UserDataMessagesReply.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transmitter.UserDataMessagesReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.transmitter.UserDataMessagesReply.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.transmitter.TransmitterRequest.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.transmitter.UserDataMessagesReply} The clone.
 */
proto.transmitter.UserDataMessagesReply.prototype.cloneMessage = function() {
  return /** @type {!proto.transmitter.UserDataMessagesReply} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated TransmitterRequest messages = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.transmitter.TransmitterRequest>}
 */
proto.transmitter.UserDataMessagesReply.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.transmitter.TransmitterRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.transmitter.TransmitterRequest, 1));
};


/** @param {Array.<!proto.transmitter.TransmitterRequest>} value  */
proto.transmitter.UserDataMessagesReply.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.transmitter.UserDataMessagesReply.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transmitter.ProfileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transmitter.ProfileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.transmitter.ProfileRequest.displayName = 'proto.transmitter.ProfileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transmitter.ProfileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.transmitter.ProfileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transmitter.ProfileRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.transmitter.ProfileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    publickey: msg.getPublickey(),
    privatekey: msg.getPrivatekey(),
    lasttimestamp: msg.getLasttimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transmitter.ProfileRequest}
 */
proto.transmitter.ProfileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transmitter.ProfileRequest;
  return proto.transmitter.ProfileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transmitter.ProfileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transmitter.ProfileRequest}
 */
proto.transmitter.ProfileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublickey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivatekey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLasttimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.transmitter.ProfileRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.transmitter.ProfileRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transmitter.ProfileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.transmitter.ProfileRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPublickey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPrivatekey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getLasttimestamp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.transmitter.ProfileRequest} The clone.
 */
proto.transmitter.ProfileRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.transmitter.ProfileRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.transmitter.ProfileRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.transmitter.ProfileRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string publicKey = 2;
 * @return {string}
 */
proto.transmitter.ProfileRequest.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.transmitter.ProfileRequest.prototype.setPublickey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string privateKey = 3;
 * @return {string}
 */
proto.transmitter.ProfileRequest.prototype.getPrivatekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.transmitter.ProfileRequest.prototype.setPrivatekey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string lastTimestamp = 4;
 * @return {string}
 */
proto.transmitter.ProfileRequest.prototype.getLasttimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.transmitter.ProfileRequest.prototype.setLasttimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transmitter.ProfileUsersReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transmitter.ProfileUsersReply.repeatedFields_, null);
};
goog.inherits(proto.transmitter.ProfileUsersReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.transmitter.ProfileUsersReply.displayName = 'proto.transmitter.ProfileUsersReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transmitter.ProfileUsersReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transmitter.ProfileUsersReply.prototype.toObject = function(opt_includeInstance) {
  return proto.transmitter.ProfileUsersReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transmitter.ProfileUsersReply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.transmitter.ProfileUsersReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.transmitter.ProfileRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transmitter.ProfileUsersReply}
 */
proto.transmitter.ProfileUsersReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transmitter.ProfileUsersReply;
  return proto.transmitter.ProfileUsersReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transmitter.ProfileUsersReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transmitter.ProfileUsersReply}
 */
proto.transmitter.ProfileUsersReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.transmitter.ProfileRequest;
      reader.readMessage(value,proto.transmitter.ProfileRequest.deserializeBinaryFromReader);
      msg.getUsersList().push(value);
      msg.setUsersList(msg.getUsersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.transmitter.ProfileUsersReply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.transmitter.ProfileUsersReply.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transmitter.ProfileUsersReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.transmitter.ProfileUsersReply.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.transmitter.ProfileRequest.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.transmitter.ProfileUsersReply} The clone.
 */
proto.transmitter.ProfileUsersReply.prototype.cloneMessage = function() {
  return /** @type {!proto.transmitter.ProfileUsersReply} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ProfileRequest users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.transmitter.ProfileRequest>}
 */
proto.transmitter.ProfileUsersReply.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.transmitter.ProfileRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.transmitter.ProfileRequest, 1));
};


/** @param {Array.<!proto.transmitter.ProfileRequest>} value  */
proto.transmitter.ProfileUsersReply.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.transmitter.ProfileUsersReply.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transmitter.TransmitterReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transmitter.TransmitterReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.transmitter.TransmitterReply.displayName = 'proto.transmitter.TransmitterReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transmitter.TransmitterReply.prototype.toObject = function(opt_includeInstance) {
  return proto.transmitter.TransmitterReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transmitter.TransmitterReply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.transmitter.TransmitterReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: msg.getResponse(),
    data: msg.getData()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transmitter.TransmitterReply}
 */
proto.transmitter.TransmitterReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transmitter.TransmitterReply;
  return proto.transmitter.TransmitterReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transmitter.TransmitterReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transmitter.TransmitterReply}
 */
proto.transmitter.TransmitterReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.transmitter.TransmitterReply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.transmitter.TransmitterReply.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transmitter.TransmitterReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.transmitter.TransmitterReply.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResponse();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.transmitter.TransmitterReply} The clone.
 */
proto.transmitter.TransmitterReply.prototype.cloneMessage = function() {
  return /** @type {!proto.transmitter.TransmitterReply} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool response = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.transmitter.TransmitterReply.prototype.getResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.transmitter.TransmitterReply.prototype.setResponse = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.transmitter.TransmitterReply.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.transmitter.TransmitterReply.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.transmitter);
